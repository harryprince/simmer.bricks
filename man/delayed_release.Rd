% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/delayed_release.R
\name{delayed_release}
\alias{delayed_release}
\title{Delayed Release of a Resource}
\usage{
delayed_release(.trj, .env, resource, task, amount = 1)
}
\arguments{
\item{.trj}{the trajectory object.}

\item{.env}{the simulation environment.}

\item{resource}{the name of the resource.}

\item{task}{the timeout duration supplied by either passing a numeric or a
callable object (a function) which must return a numeric (negative values are
automatically coerced to positive).}

\item{amount}{the amount to seize/release, accepts either a numeric or a callable object
(a function) which must return a numeric.}
}
\value{
Returns the following chain of activities: \code{\link[simmer]{clone}}
> \code{\link[simmer:clone]{synchronize}} (see examples below).
}
\description{
This brick encapsulates a delayed release: the arrival releases the resource
and continues its way immediately, but the resource is busy for an additional
period of time.
}
\examples{
env <- simmer() \%>\%
  add_resource("res1") \%>\%
  add_resource("res2", preemptive=TRUE)

## These are equivalent if the resource is non-preemptive:
trajectory() \%>\%
  delayed_release(env, "res1", 5, 1)

trajectory() \%>\%
  clone(
    2,
    trajectory() \%>\%
      set_capacity("res1", function()
        get_capacity(env, "res1") - 1) \%>\%
      release("res1", 1),
    trajectory() \%>\%
      timeout(5) \%>\%
      set_capacity("res1", function()
        get_capacity(env, "res1") + 1)
  ) \%>\%
  synchronize(wait=FALSE)

## These are equivalent if the resource is preemptive:
trajectory() \%>\%
  delayed_release(env, "res2", 5, 1)

trajectory() \%>\%
  clone(
    2,
    trajectory() \%>\%
      release("res2", 1),
    trajectory() \%>\%
      set_prioritization(function()
        get_prioritization(env) + c(rep(.Machine$integer.max, 2), 0)) \%>\%
      seize("res2", 1) \%>\%
      timeout(5) \%>\%
      release("res2", 1)
  ) \%>\%
  synchronize(wait=FALSE)

}
